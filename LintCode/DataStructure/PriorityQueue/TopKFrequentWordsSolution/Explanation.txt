
Explanation :

We use PriorityQueue to do this problem.

First think about the rule of priority in this problem.

First, compare the frequency of word appearance.

So we need to remember the frequency of each word, how to?

HashMap<String, Integer>.

Then, if frequency is the same, compares the strings.

So we both need a word and frequency in one data object.

So we need to create a new class includes both word and frequency.

Then we create a new Comparator to compare.

Then we construct the priority queue, poll the top k words, done.

Time Complexity : O(NlogN)

Space Complexity : O(N)

Above is brute force, keep a N-size PriorityQueue, now consider about O(NlogK)

If time complexity is O(NlogK), well, it must keep a K-size ProorityQueue.

But to notice we should keep the queue in reverse order,

That is, when the queue is K size, add next number will compare with the head elem.

If the frequency is more, poll the head, add curWord, which keep the words in queue is the top k words.

And remember to reverse order when output.