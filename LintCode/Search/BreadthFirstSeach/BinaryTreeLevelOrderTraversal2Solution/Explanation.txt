
Explanation :

First : BFS, easy way, traverse from top to bottom, only need to addList(0, candidate), so the First in will

become last one.

Second : DFS, from depth to 0 traversal, add from bottom to top.

We use a second solution, dfs here.

For dfs, we need to define a level value to let the program traverse to the level, and add the value to the result.

We can using the depth of tree, then looply substract 1, for each dfs in the outside loop.

while(loop)
{
    if (maxLevel < 0)
        break;

    List curLevel;

    dfs(curLevel, tree, maxLevel, 0);

    maxLevel--;

}